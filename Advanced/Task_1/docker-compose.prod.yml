version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: codeva_postgres_prod
    environment:
      POSTGRES_DB: codeva_fullstack_prod
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./server/src/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - codeva_network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: codeva_redis_prod
    ports:
      - "6379:6379"
    volumes:
      - redis_prod_data:/data
    networks:
      - codeva_network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}

  # Backend API
  api:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: codeva_api_prod
    env_file:
      - ./server/.env.production
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD}@postgres:5432/codeva_fullstack_prod
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
    ports:
      - "5000:5000"
    depends_on:
      - postgres
      - redis
    networks:
      - codeva_network
    restart: unless-stopped
    volumes:
      - ./server/uploads:/app/uploads
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React App
  web:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: codeva_web_prod
    ports:
      - "3000:80"
    depends_on:
      - api
    networks:
      - codeva_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: codeva_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - web
      - api
    networks:
      - codeva_network
    restart: unless-stopped

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local

networks:
  codeva_network:
    driver: bridge
